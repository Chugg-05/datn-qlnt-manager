package com.example.datn_qlnt_manager.exception;

import org.springframework.http.HttpStatus;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.experimental.FieldDefaults;

@Getter
@FieldDefaults(level = AccessLevel.PRIVATE)
public enum ErrorCode {
    // Code: 500
    INTERNAL_SERVER_ERROR(500, "Uncategorized error.", HttpStatus.INTERNAL_SERVER_ERROR),
    UPLOAD_FAILED(500, "Upload failed.", HttpStatus.INTERNAL_SERVER_ERROR),
    JSON_PROCESSING_ERROR(500, "Failed to process JSON data.", HttpStatus.INTERNAL_SERVER_ERROR),

    // Code: 401
    UNAUTHORIZED(401, "Unauthenticated: Invalid or expired JWT token.", HttpStatus.UNAUTHORIZED),
    INVALID_TOKEN_FORMAT(401, "Invalid token format.", HttpStatus.UNAUTHORIZED),
    INVALID_SIGNATURE(401, "Token signature is invalid.", HttpStatus.UNAUTHORIZED),
    EXPIRED_TOKEN(401, "Token has expired.", HttpStatus.UNAUTHORIZED),
    TOKEN_BLACKLISTED(401, "Token has been blacklisted (user logged out).", HttpStatus.UNAUTHORIZED),

    // Code: 403
    FORBIDDEN(403, "You don't have permission.", HttpStatus.FORBIDDEN),
    CANT_REMOVE_USER(403, "You can't remove another user.", HttpStatus.FORBIDDEN),
    ACCOUNT_HAS_BEEN_LOCKED(403, "User account is locked.", HttpStatus.FORBIDDEN),
    FORBIDDEN_CATEGORY_TYPE(
            400, "Additional services cannot be added by charging the room rate.", HttpStatus.FORBIDDEN),

    // Code: 400
    BAD_REQUEST(400, "Invalid request.", HttpStatus.BAD_REQUEST),
    CANNOT_SEND_EMAIL(400, "Cannot send email.", HttpStatus.BAD_REQUEST),
    EMAIL_SENDING_FAILED(400, "Email sending failed.", HttpStatus.BAD_REQUEST),
    INVALID_KEY(400, "Invalid key.", HttpStatus.BAD_REQUEST),
    INVALID_TOKEN(400, "Invalid token.", HttpStatus.BAD_REQUEST),
    USER_NOT_DELETED(400, "User not deleted.", HttpStatus.BAD_REQUEST),
    USER_NOT_LOCKED(400, "User is not locked.", HttpStatus.BAD_REQUEST),
    INVALID_EMAIL_BLANK(400, "Username or email must not be blank.", HttpStatus.BAD_REQUEST),
    INVALID_EMAIL_FORMAT(400, "Must be a valid email with domain.", HttpStatus.BAD_REQUEST),
    INVALID_EMAIL_OR_PASSWORD(400, "Invalid email or password.", HttpStatus.BAD_REQUEST),
    INVALID_FULL_NAME(400, "Your first name must be at least {min} characters.", HttpStatus.BAD_REQUEST),
    INVALID_PASSWORD(400, "Your password must be at least {min} characters.", HttpStatus.BAD_REQUEST),
    INVALID_PASSWORD_BLANK(400, "Password must not be blank.", HttpStatus.BAD_REQUEST),
    INVALID_PASSWORD_LENGTH(400, "Password must be at least 6 characters long.", HttpStatus.BAD_REQUEST),
    INVALID_PASSWORD_UPPERCASE(400, "Password must contain at least one uppercase letter.", HttpStatus.BAD_REQUEST),
    INVALID_PASSWORD_LOWERCASE(400, "Password must contain at least one lowercase letter.", HttpStatus.BAD_REQUEST),
    INVALID_PASSWORD_NUMBER(400, "Password must contain at least one digit.", HttpStatus.BAD_REQUEST),
    INVALID_PASSWORD_SPECIAL_CHARACTERS(
            400, "Password must contain at least one special character(@#$%&*!).", HttpStatus.BAD_REQUEST),
    INVALID_GENDER_BLANK(400, "Gender cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_DOB(400, "Your age must be at least {min}.", HttpStatus.BAD_REQUEST),
    INVALID_PHONE(400, "Your phone must be at least {min}.", HttpStatus.BAD_REQUEST),
    INVALID_PHONE_BLANK(400, "Phone number is not blank.", HttpStatus.BAD_REQUEST),
    PASSWORDS_CONFIRM_NOT_MATCH(400, "Password confirm not match.", HttpStatus.BAD_REQUEST),
    NEW_PASSWORD_SAME_AS_OLD(400, "New password same as old.", HttpStatus.BAD_REQUEST),
    INVALID_PHONE_NUMBER_FORMAT(
            400,
            "Phone number must be 10-11 digits, starting with 0 or +84. Example: 0974 xxx xxx",
            HttpStatus.BAD_REQUEST),
    INVALID_ROLE_NAME_AND_PERMISSION_BLANK(400, "Name cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_ROLE_NAME_AND_PERMISSION_FORMAT(
            400,
            "Names must only contain uppercase letters, numbers, and the '_' character to separate words.",
            HttpStatus.BAD_REQUEST),
    INVALID_DESCRIPTION_BLANK(400, "Description cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_PERMISSION_BLANK(400, "Permission cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_OTP_BLANK(400, "OTP code cannot be left blank.", HttpStatus.BAD_REQUEST),
    INVALID_OTP_FORMAT(400, "OTP code is not in correct format.", HttpStatus.BAD_REQUEST),

    REFRESH_TOKEN_INVALID(400, "Refresh token invalid.", HttpStatus.BAD_REQUEST),
    BUILDING_ID_REQUIRED(400,"Building ID is required.", HttpStatus.BAD_REQUEST),
    REFRESH_TOKEN_EXPIRED(400, "Refresh token expired.", HttpStatus.BAD_REQUEST),
    INVALID_OTP_CODE(400, "OTP code is incorrect or expired.", HttpStatus.BAD_REQUEST),
    INVALID_ISSUER(400, "Invalid issuer.", HttpStatus.BAD_REQUEST),
    INVALID_AUDIENCE(400, "Invalid audience.", HttpStatus.BAD_REQUEST),

    INVALID_FLOORS_NUMBER_FOR_RENT(
            400, "Number of floors for rent exceeds actual number of floors.", HttpStatus.BAD_REQUEST),
    ACTUAL_FLOOR_NUMBER_IS_INVALID(400, "The actual number of floors must be at least {min}.", HttpStatus.BAD_REQUEST),
    INVALID_RENTAL_FLOOR_NUMBER(400, "Number of floors for rent must be greater than 0.", HttpStatus.BAD_REQUEST),
    INVALID_BUILDING_CODE_BLANK(400, "Building Code cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_BUILDING_NAME_BLANK(400, "Building Name cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_ADDRESS_BLANK(400, "Address cannot be blank", HttpStatus.BAD_REQUEST),
    INVALID_ACTUAL_NUMBER_OF_FLOORS_BLANK(400, "Actual Number Of Floors cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_NUMBER_OF_FLOORS_FOR_RENT_BLANK(400, "Number Of Floors For Rent cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_BUILDING_TYPE_BLANK(400, "Building Type cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_BUILDING_STATUS_BLANK(400, "Building Status cannot be blank.", HttpStatus.BAD_REQUEST),

    FLOOR_NAME_INVALID(400, "Floor name can not be blank.", HttpStatus.BAD_REQUEST),
    MAX_ROOM_INVALID(400, "Maximum room must not be null.", HttpStatus.BAD_REQUEST),
    FLOOR_TYPE_INVALID(400, "Floor type must not be null.", HttpStatus.BAD_REQUEST),
    STATUS_TYPE_INVALID(400, "Floor status must not be null.", HttpStatus.BAD_REQUEST),
    MAX_ROOM_AT_LEAST(400, "Maximum number of rooms must be at least 1.", HttpStatus.BAD_REQUEST),
    MAX_ROOM_SEARCH(400, "Maximum room must be >= 0.", HttpStatus.BAD_REQUEST),
    MAX_ROOM_AT_MOST(400, "Each floor must not have more than 100 rooms.", HttpStatus.BAD_REQUEST),
    FLOOR_ROOM_LIMIT_REACHED(400, "This floor is full, no new rooms can be added.", HttpStatus.BAD_REQUEST),

    INVALID_CUSTOMER_CODE_BLANK(400, "Customer code cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_ID_NUMBER_BLANK(400, "Identity card number cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_ID_NUMBER_FORMAT(400, "Incorrect ID number format.", HttpStatus.BAD_REQUEST),
    INVALID_TENANT_STATUS_BLANK(400, "Tenant status cannot be null.", HttpStatus.BAD_REQUEST),
    TENANT_CANNOT_BE_DELETED(400, "This tenant cannot be deleted.", HttpStatus.BAD_REQUEST),
    TENANT_CANNOT_BE_TOGGLED(400, "This tenant cannot be toggled.", HttpStatus.BAD_REQUEST),

    INVALID_VEHICLE_STATUS_BLANK(400, "Vehicle status cannot be null.", HttpStatus.BAD_REQUEST),
    INVALID_VEHICLE_TYPE_BLANK(400, "Vehicle type cannot be null.", HttpStatus.BAD_REQUEST),
    INVALID_LICENSE_PLATE_BLANK(400, "License plate cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_REGISTRATION_DATE_BLANK(400, "Registration date cannot be null.", HttpStatus.BAD_REQUEST),
    INVALID_TENANT_ID_BLANK(400, "Tenant id cannot be null.", HttpStatus.BAD_REQUEST),
    INVALID_REGISTRATION_DATE(400, "Registration date cannot be in the future.", HttpStatus.BAD_REQUEST),
    INVALID_LICENSE_PLATE(
            400, "License plate is not in correct format (EX: 29B1-12345 or 29AN-12345).", HttpStatus.BAD_REQUEST),
    // Service Room Validation
    ROOM_ID_REQUIRED(400, "Room ID is required.", HttpStatus.BAD_REQUEST),
    SERVICE_ID_REQUIRED(400, "Service ID is required.", HttpStatus.BAD_REQUEST),
    START_DATE_REQUIRED(400, "Start date is required.", HttpStatus.BAD_REQUEST),
    START_DATE_MUST_BE_TODAY_OR_FUTURE(400, "Start date must be today or in the future.", HttpStatus.BAD_REQUEST),
    TOTAL_PRICE_REQUIRED(400, "Total price is required.", HttpStatus.BAD_REQUEST),
    TOTAL_PRICE_MUST_BE_NON_NEGATIVE(400, "Total price must be >= 0.", HttpStatus.BAD_REQUEST),
    STATUS_REQUIRED(400, "Service room status is required.", HttpStatus.BAD_REQUEST),

    INVALID_DEFAULT_SERVICE_APPLIES_TO_NULL(400, "Default Service Applies To cannot be null.", HttpStatus.BAD_REQUEST),
    INVALID_PRICES_APPLY_NULL(400, "Prices Apply cannot be null.", HttpStatus.BAD_REQUEST),
    INVALID_START_APPLYING_NULL(400, "Start Applying cannot be null.", HttpStatus.BAD_REQUEST),
    INVALID_DEFAULT_SERVICE_STATUS_NULL(400, "Default service status cannot be null.", HttpStatus.BAD_REQUEST),
    INVALID_BUILDING_ID_NULL(404, "Building ID cannot be null.", HttpStatus.NOT_FOUND),
    INVALID_SERVICE_ID_NULL(404, "Service ID cannot be null.", HttpStatus.NOT_FOUND),
    PRICES_APPLY_INVALID(400, "Prices Apply must be >= 0.", HttpStatus.BAD_REQUEST),
    DUPLICATE_SERVICE(400, "Service already exist for this building and application type.", HttpStatus.BAD_REQUEST),

    INVALID_NUMBER_OF_PEOPLE(400, "Number of people must be at least { min }.", HttpStatus.BAD_REQUEST),
    INVALID_START_DATE_BLANK(400, "Start date cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_END_DATE_BLANK(400, "End date cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_DEPOSIT_BLANK(400, "Deposit cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_DEPOSIT(400, "Deposit must be greater than 0.", HttpStatus.BAD_REQUEST),
    INVALID_TENANTS_BLANK(400, "Tenants cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_TENANTS(400, "At least one tenant must be selected.", HttpStatus.BAD_REQUEST),
    INVALID_CONTRACT_STATUS_BLANK(400, "Contract status cannot be blank.", HttpStatus.BAD_REQUEST),
    NUMBER_OF_PEOPLE_EXCEEDS_LIMIT(400, "Number of people exceeds the limit of the room.", HttpStatus.NOT_FOUND),
    END_DATE_BEFORE_START_DATE(400, "End date cannot be before start date.", HttpStatus.NOT_FOUND),
    TENANTS_EXCEEDS_NUMBER_OF_PEOPLE(
            400, "The number of tenants exceeds the number of people in the room.", HttpStatus.NOT_FOUND),
    CANNOT_DELETE_CONTRACT(400, "This room is still under contract and cannot be deleted.", HttpStatus.NOT_FOUND),
    CANNOT_REACTIVATE_EXPIRED_CONTRACT(400, "Expired contracts cannot be reactivated.", HttpStatus.BAD_REQUEST),
    CANNOT_TOGGLE_CONTRACT_STATUS(400, "Cannot transfer current contract status.", HttpStatus.BAD_REQUEST),
    OWNER_ID_REQUIRED(400, "Owner ID is required.", HttpStatus.BAD_REQUEST),
    IS_REPRESENTATIVE_REQUIRED(400, "Is Representative is required.", HttpStatus.BAD_REQUEST),
    TENANT_ALREADY_IN_CONTRACT(
            400, "This tenant already has a lease. Information cannot be changed.", HttpStatus.BAD_REQUEST),
    TENANT_HAS_NO_CONTRACT(400, "Tenant has no contract", HttpStatus.BAD_REQUEST),
    CANNOT_ADD_MORE_FLOORS(
            400, "Cannot add more floors than building's real number of floors.", HttpStatus.BAD_REQUEST),
    CANNOT_TOGGLE_SERVICE_STATUS(400, "Unable to change status for this service", HttpStatus.BAD_REQUEST),
    CANNOT_TOGGLE_ASSET_STATUS(400, "Unable to change status for this asset", HttpStatus.BAD_REQUEST),

    INVALID_TITLE_BLANK(400, "Title cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_JOB_PRIORITY_LEVEL_NULL(400, "Job priority level cannot be null.", HttpStatus.BAD_REQUEST),
    INVALID_JOB_STATUS_NULL(400, "Job status cannot be null.", HttpStatus.BAD_REQUEST),
    INVALID_COMPLETION_DEADLINE_NULL(400, "Completion deadline cannot be null.", HttpStatus.BAD_REQUEST),
    INVALID_JOB_OBJECT_TYPE_NULL(400, "Job object type cannot be null.", HttpStatus.BAD_REQUEST),
    INVALID_COMPLETION_DEADLINE_PAST(400, "The deadline cannot be in the past.", HttpStatus.BAD_REQUEST),
    INVALID_SERVICE_APPLIES(400, "Unable to determine service application type.", HttpStatus.BAD_REQUEST),

    INVOICE_CREATION_FAILED(400, "Invoice creation failed.", HttpStatus.BAD_REQUEST),
    INVOICE_ALREADY_EXISTS(400, "Invoice already exists for this month and year.", HttpStatus.BAD_REQUEST),
    CONTRACT_NOT_ACTIVE(400, "Contract expired.", HttpStatus.BAD_REQUEST),
    INVALID_SERVICE_TYPE(400, "Invalid service type.", HttpStatus.BAD_REQUEST),
    METER_TYPE_NOT_FOUND(400, "Meter type not found.", HttpStatus.BAD_REQUEST),
    DUPLICATE_INVOICE_DETAIL(400, "Duplicate invoice detail for the same service type.", HttpStatus.BAD_REQUEST),
    INVALID_METER_READING(
            400, "Invalid meter reading. New number cannot be less than old number.", HttpStatus.BAD_REQUEST),
    INVALID_COMPENSATION_DATA(400, "Invalid compensation data.", HttpStatus.UNAUTHORIZED),
    INVOICE_ITEM_TYPE_NOT_NULL(400, "Invoice item type must not be null.", HttpStatus.BAD_REQUEST),
    INVALID_NEW_INDEX_MIN(400, "The new index must be greater than {min}.", HttpStatus.BAD_REQUEST),
    INVALID_QUANTITY_MIN(400, "The quantity must be greater than {min}.", HttpStatus.BAD_REQUEST),
    INVALID_UNIT_PRICE_MIN(400, "The unit price must be greater than {min}.", HttpStatus.BAD_REQUEST),
    CANNOT_DELETE_ROOM_CHARGE(400, "This room charge cannot be deleted.", HttpStatus.BAD_REQUEST),
    NOT_LAST_MONTH_OF_CONTRACT(400, "This is not the last month of the contract.", HttpStatus.BAD_REQUEST),
    MISSING_MAIN_INVOICE(400, "Main invoice is required for this operation.", HttpStatus.BAD_REQUEST),
    DUPLICATE_END_INVOICE(400, "An end invoice already exists for this contract.", HttpStatus.BAD_REQUEST),
    INVOICE_ALREADY_CANCELLED(400, "This invoice has already been cancelled.", HttpStatus.BAD_REQUEST),
    INVALID_INVOICE_STATUS(400, "Invalid invoice status.", HttpStatus.BAD_REQUEST),
    INVOICE_NOT_EDITABLE(400, "This invoice cannot be edited.", HttpStatus.BAD_REQUEST),
    INVALID_PAYMENT_DUE_DATE(
            400, "The payment due date must be in the future and within this month only", HttpStatus.BAD_REQUEST),
    INVOICE_CAN_NOT_BE_DELETED(400, "This invoice cannot be deleted.", HttpStatus.BAD_REQUEST),
    INVALID_ASSETS_BLANK(400, "Assets cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_ASSETS(400, "At least one asset must be selected.", HttpStatus.BAD_REQUEST),

    INVALID_CATEGORY_WITH_CALCULATION(400, "Invalid category with calculation.", HttpStatus.BAD_REQUEST),
    UNIT_REQUIRED_FOR_CALCULATION(
            400, "Units must be entered for this calculation or not supported.", HttpStatus.BAD_REQUEST),
    INVALID_UNIT_COMBINATION(
            400,
            "Unable to determine appropriate unit of measure for selected calculation and category.",
            HttpStatus.BAD_REQUEST),
    INVALID_SERVICE_NAME_BLANK(400, "Service name cannot be blank.", HttpStatus.BAD_REQUEST),
    INVALID_SERVICE_CATEGORY_NULL(400, "Service category cannot be null.", HttpStatus.BAD_REQUEST),
    INVALID_PRICE(400, "Price must be greater than 0.", HttpStatus.BAD_REQUEST),
    INVALID_PRICE_NULL(400, "Price cannot be null.", HttpStatus.BAD_REQUEST),
    INVALID_SERVICE_CALCULATION_NULL(400, "Service calculation cannot be null.", HttpStatus.BAD_REQUEST),
    INVALID_SERVICE_STATUS_NULL(400, "Service status cannot be blank.", HttpStatus.BAD_REQUEST),
    METER_READING_ALREADY_BILLED(400, "Meter reading has been invoiced. Cannot be updated.", HttpStatus.BAD_REQUEST),
    CONTRACT_EXPIRED(400, "Contract has expired. Invoice cannot be generated.", HttpStatus.BAD_REQUEST),
    SERVICE_ROOM_ALREADY_EXISTS(400, "Service room already exists for this service and room.", HttpStatus.BAD_REQUEST),
    NEW_UNIT_PRICE_REQUIRED(400, "New unit price is required.", HttpStatus.BAD_REQUEST),
    UNIT_PRICE_REQUIRED(400, "Unit price is required.", HttpStatus.BAD_REQUEST),
    PRICE_MUST_BE_POSITIVE(400, "Price must be greater than 0.", HttpStatus.BAD_REQUEST),
    INVALID_ASSET_TYPE_NOT_NULL(400, "Asset type must not be null", HttpStatus.BAD_REQUEST),
    INVALID_SECURITY_ASSET_LOCATION(400, "Asset type 'AN_NINH' must belong to 'CHUNG'", HttpStatus.BAD_REQUEST),
    ASSET_NAME_NOT_BLANK(400, "Asset name must not be blank.", HttpStatus.BAD_REQUEST),
    ASSET_ROOM_ALREADY_EXISTS(400, "Asset already exists in this room.", HttpStatus.BAD_REQUEST),
    ASSET_BELONG_TO_REQUIRED(400, "Asset belong to must not be null.", HttpStatus.BAD_REQUEST),
    INVALID_ASSET_BELONG_TO(400, "Invalid asset belong to value.", HttpStatus.BAD_REQUEST),
    PUBLIC_ASSET(400, "You cannot add shared property to a room.", HttpStatus.BAD_REQUEST),
    SERVICE_IDS_REQUIRED(400, "Service ID are required.", HttpStatus.BAD_REQUEST),
    ASSET_ID_REQUIRED(400, "Asset ID are required.", HttpStatus.BAD_REQUEST),
    ROOM_NOT_FOUND_IN_BUILDING(400, "Room not found in this building.", HttpStatus.BAD_REQUEST),
    ASSET_NOT_ACTIVE(400, "Asset is not active.", HttpStatus.BAD_REQUEST),
    SERVICE_NOT_ACTIVE(400, "Service is not active.", HttpStatus.BAD_REQUEST),
    NO_PENDING_INVOICES(400, "There are no invoices to generate payment vouchers this month.", HttpStatus.BAD_REQUEST),
    ALL_INVOICES_ALREADY_HAVE_RECEIPTS(400, "All invoices have payment vouchers this month.", HttpStatus.BAD_REQUEST),
    INVALID_PAYMENT_METHOD(400, "Invalid payment method.", HttpStatus.BAD_REQUEST),
    NOT_SUPPORTED_YET(400, "This payment method is not supported yet.", HttpStatus.BAD_REQUEST),
    CANNOT_REFUSE_PAYMENTS(400, "You cannot refuse payment.", HttpStatus.BAD_REQUEST),
    INVALID_PAYMENT_STATUS(400, "You can no longer confirm this invoice.", HttpStatus.BAD_REQUEST),
    REASON_CAN_NOT_BE_NULL(400, "Reason cannot be null.", HttpStatus.BAD_REQUEST),
    INVALID_SERVICE_CATEGORY(400, "Invalid service category.", HttpStatus.BAD_REQUEST),
    MISSING_NUMBER_OF_PEOPLE_IN_CONTRACT(400, "Number of people in the contract is missing.", HttpStatus.BAD_REQUEST),
    INVALID_VEHICLE_COUNT(400, "Invalid vehicle count.", HttpStatus.BAD_REQUEST),
    INVALID_QUANTITY_NOT_NULL(400, "Quantity must not be null", HttpStatus.BAD_REQUEST),

    // Code: 404
    USER_NOT_FOUND(404, "User not found.", HttpStatus.NOT_FOUND),
    BUILDING_ID_NOT_FOUND(404, "Building ID not found.", HttpStatus.NOT_FOUND),
    CHAT_NOT_FOUND(404, "Chat not found.", HttpStatus.NOT_FOUND),
    MESSAGE_NOT_FOUND(404, "Message not found.", HttpStatus.NOT_FOUND),
    API_ENDPOINT_NOT_FOUND(404, "API endpoint not found.", HttpStatus.NOT_FOUND),
    PERMISSION_NOT_FOUND(404, "Permission not found.", HttpStatus.NOT_FOUND),
    ROLE_NOT_FOUND(404, "Role not found.", HttpStatus.NOT_FOUND),
    EMAIL_NOT_FOUND(404, "Email not found.", HttpStatus.NOT_FOUND),
    BUILDING_NOT_FOUND(404, "Building not found.", HttpStatus.NOT_FOUND),
    FLOOR_NOT_FOUND(404, "floor not found.", HttpStatus.NOT_FOUND),
    ROOM_NOT_FOUND(404, "Room not found", HttpStatus.NOT_FOUND),
    TENANT_NOT_FOUND(404, "Tenant not found", HttpStatus.NOT_FOUND),
    METER_READING_NOT_FOUND(404, "Meter reading not found", HttpStatus.NOT_FOUND),
    ASSET_TYPE_NAME_INVALID(404, "Asset type can not be blank.", HttpStatus.NOT_FOUND),
    ASSET_GROUP_INVALID(404, "Asset group must not be null.", HttpStatus.NOT_FOUND),
    DESCRIPTION_INVALID(404, "Description asset type can not be blank.", HttpStatus.NOT_FOUND),
    ASSET_TYPE_NOT_FOUND(404, "Asset type not found", HttpStatus.NOT_FOUND),
    ASSET_NOT_FOUND(404, "Asset not found", HttpStatus.NOT_FOUND),
    VEHICLE_NOT_FOUND(404, "Vehicle not found.", HttpStatus.NOT_FOUND),
    METER_NOT_FOUND(404, "Meter not found.", HttpStatus.NOT_FOUND),
    SERVICE_NOT_FOUND(404, "service not found.", HttpStatus.NOT_FOUND),
    CONTRACT_NOT_FOUND(404, "Contract not found.", HttpStatus.NOT_FOUND),
    DEFAULT_SERVICE_NOT_FOUND(404, "Default Service not found.", HttpStatus.NOT_FOUND),
    JOB_NOT_FOUND(404, "Job not found.", HttpStatus.NOT_FOUND),
    METER_NAME_REQUIRED(404, "Meter name not found.", HttpStatus.NOT_FOUND),
    INITIAL_INDEX_REQUIRED(404, "INITIAL INDEX not found.", HttpStatus.NOT_FOUND),
    METER_CODE_NOT_FOUND(404, "Meter code not found.", HttpStatus.NOT_FOUND),
    MANU_FACTURE_DATE_NOT_FOUND(404, "Manu facture date not found.", HttpStatus.NOT_FOUND),
    METER_CODE_EXISTED(404, "Meter code exited.", HttpStatus.NOT_FOUND),
    OLD_INDEX_NOT_FOUND(404, "Old index not found.", HttpStatus.NOT_FOUND),
    NEW_INDEX_NOT_FOUND(404, "New index not found.", HttpStatus.NOT_FOUND),
    MONTH_NOT_FOUND(404, "Month not found.", HttpStatus.NOT_FOUND),
    MONTH_GREATER(404, "Month must be greater than 1.", HttpStatus.NOT_FOUND),
    MONTH_LESS(404, "Month must be less than 12.", HttpStatus.NOT_FOUND),
    YEAR_NOT_FOUND(404, "Year not found.", HttpStatus.NOT_FOUND),
    YEAR_GREATER(404, "Yeah must be greater than 1.", HttpStatus.NOT_FOUND),
    READING_DATE_NOT_FOUND(404, "Reading date not found.", HttpStatus.NOT_FOUND),
    INVOICE_NOT_FOUND(404, "Invoice not found.", HttpStatus.NOT_FOUND),
    INVOICE_ID_REQUIRED(404, "Invoice ID must not be blank", HttpStatus.BAD_REQUEST),
    PAYMENT_METHOD_REQUIRED(404, "Payment method is required", HttpStatus.BAD_REQUEST),
    PAYMENT_STATUS_REQUIRED(404,"Payment method is required",HttpStatus.BAD_REQUEST),

    // feedback
    FEED_BACK_NOT_FOUND(404, "Feed back not found.", HttpStatus.NOT_FOUND),
    CONTENT_NOT_FOUND(404, "Content must not be blank.", HttpStatus.BAD_REQUEST),
    RATING_NOT_FOUND(404, "Rating must not be null.", HttpStatus.BAD_REQUEST),
    RATING_TOO_LOW(404, "Rating must be at least 1.", HttpStatus.BAD_REQUEST),
    RATING_TOO_HIGH(404, "Rating must not exceed 5.", HttpStatus.BAD_REQUEST),
    FEED_BACK_STATUS_NOT_FOUND(404, "Feedback status must not be null.", HttpStatus.BAD_REQUEST),
    FEED_BACK_TYPE_NOT_FOUND(404, "Feedback status must not be null.", HttpStatus.BAD_REQUEST),
    FEED_BACK_DUPLICATED(404, "Feedback was duplicated", HttpStatus.BAD_REQUEST),
    NOTE_NOT_FOUND(404, "Note not found.", HttpStatus.NOT_FOUND),
    ASSET_STATUS_NOT_FOUND(404, "Asset status not found.", HttpStatus.NOT_FOUND),
    PAYMENT_RECEIPT_NOT_FOUND(404, "Payment receipt not found.", HttpStatus.NOT_FOUND),
    ASSET_ROOM_NOT_FOUND(404, "Asset room not found.", HttpStatus.NOT_FOUND),

    // notification
    NOTIFICATION_TITLE_REQUIRED(404, "Title must not be blank", HttpStatus.NOT_FOUND),
    NOTIFICATION_CONTENT_REQUIRED(404, "Content must not be blank", HttpStatus.NOT_FOUND),
    NOTIFICATION_TYPE_REQUIRED(404, "Notification type is required", HttpStatus.NOT_FOUND),
    SEND_TO_ALL_REQUIRED(404, "SendToAll must not be null", HttpStatus.NOT_FOUND),
    NOTIFICATION_USERS_REQUIRED(404, "Notification users must not be null", HttpStatus.NOT_FOUND),
    NOTIFICATION_NOT_FOUND(404, "Notification must not be null", HttpStatus.NOT_FOUND),
    NOTIFICATION_NOT_ASSIGNED(404, "Notification not assigned to this user", HttpStatus.NOT_FOUND),
    INVOICE_DETAIL_NOT_FOUND(404, "Invoice detail not found.", HttpStatus.NOT_FOUND),
    SERVICE_ROOM_CANNOT_DELETE(400, "This is a required service and cannot be deleted.", HttpStatus.BAD_REQUEST),
    // Code: 409
    OTP_ALREADY_SENT(409, "OTP already sent.", HttpStatus.BAD_REQUEST),
    USER_ALREADY_DELETED(409, "User has been deleted.", HttpStatus.BAD_REQUEST),
    USER_ALREADY_LOCKED(409, "User has been locked.", HttpStatus.BAD_REQUEST),
    EMAIL_EXISTED(409, "Email already existed.", HttpStatus.CONFLICT),
    PHONE_NUMBER_EXISTED(409, "Phone already existed.", HttpStatus.CONFLICT),
    FlOOR_EXISTED(409, "Floor already existed.", HttpStatus.CONFLICT),
    FLOOR_ALREADY_EXISTS(409, "Floor name already exists in this building.", HttpStatus.CONFLICT),
    PERMISSION_EXISTED(409, "Permission already existed.", HttpStatus.BAD_REQUEST),
    ROLE_EXISTED(409, "Role already existed.", HttpStatus.BAD_REQUEST),
    BUILDING_CODE_EXISTED(409, "Building Code already existed.", HttpStatus.CONFLICT),
    BUILDING_NAME_EXISTED(409, "Building Name already existed.", HttpStatus.CONFLICT),
    ROOM_CODE_EXISTED(409, "Ma phong already existed.", HttpStatus.BAD_REQUEST),
    ID_NUMBER_EXISTED(409, "ID card number already existed.", HttpStatus.CONFLICT),
    ASSET_TYPE_EXISTED(409, "Asset Type already existed.", HttpStatus.BAD_REQUEST),
    LICENSE_PLATE_EXISTED(409, "License plate already exists", HttpStatus.BAD_REQUEST),
    DUPLICATE_ASSET_NAME(409, "Asset name already exists", HttpStatus.BAD_REQUEST),
    ROOM_EXISTED_SERVICE(409, "Room already has this service", HttpStatus.BAD_REQUEST),
    SERVICE_ROOM_NOT_FOUND(409, "Service room not found.", HttpStatus.NOT_FOUND),
    ROOM_ALREADY_HAS_CONTRACT(409, "This room is under contract.", HttpStatus.BAD_REQUEST),
    NEW_INDEX_LESS_THAN_OLD(409, "New number must be less than old number", HttpStatus.BAD_REQUEST),
    METER_READING_EXISTED(409, "The meter reading has been recorded for this month.", HttpStatus.CONFLICT),
    DUPLICATE_SERVICE_CATEGORY(409, "Category already exists.", HttpStatus.BAD_REQUEST),
    METER_NAME_ALREADY_EXISTS_IN_ROOM(409,"Meter name already exists in this room",HttpStatus.BAD_REQUEST),
    METER_TYPE_ALREADY_EXISTS_IN_ROOM(409,"Meter type already exists in this room",HttpStatus.BAD_REQUEST),
    PAYMENT_RECEIPT_CANNOT_BE_UPDATED(409, "Payment receipt cannot be updated", HttpStatus.BAD_REQUEST),
    INVALID_PAYMENT_STATUS_CHANGE(409, "Only confirmed if status is CHO_XAC_NHAN", HttpStatus.BAD_REQUEST),
    PAYMENT_RECEIPT_ALREADY_EXISTS(409, "Payment receipt already exists", HttpStatus.BAD_REQUEST),

    ;

    final int code;
    final String message;
    final HttpStatus status;

    ErrorCode(int code, String message, HttpStatus status) {
        this.code = code;
        this.message = message;
        this.status = status;
    }
}